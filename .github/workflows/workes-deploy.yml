name: 部署布灵图床后端到Cloudflare Workers

on:
  push:
    branches:
      - main
    # 添加路径过滤器，这样此工作流只在 /workers/ 目录下的文件变更时运行
    paths:
      - 'workers/**'
      - '.github/workflows/workes-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Worker
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4                                                                                                      
                                                                                                                                       
      - name: 1. Setup Node.js                                                                                                          
        uses: actions/setup-node@v4                                                                                                    
        with:                                                                                                                          
          node-version: '20'                                                                                                           
                                                                                                                                       
      - name: 2. Install Dependencies                                                                                                   
        working-directory: ./workers  # <--- 添加这一行
        run: |       
          echo "开始在 ./workers 目录安装依赖..."                                                                                                                  
          npm install                                                                                                                  
          npm install -g wrangler                                                                                                      
          which wrangler  # 显示 wrangler 的安装位置                                                                                   
          wrangler --version  # 显示 wrangler 版本                                                                                     
          echo "✅ 依赖安装成功"
                                                                                                                                       
      - name: 3. Create D1 Database if not exists                                                                                       
        working-directory: ./workers  # <--- 添加这一行
        env:                                                                                                                           
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}                                                                            
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}                                                                          
        run: |                                                                                                                         
          # 注意：下面的所有命令现在都在 ./workers 目录内运行
          DATABASE_NAME=${{ secrets.CF_D1_DATABASE || 'buling-imgbed-d1' }}                                                            
          LOCATION=${{ secrets.CF_LOCATION || 'apac' }}                                                                                
          echo "检查现有 D1 数据库..."                                                                                     
          DATABASE_INFO=$(wrangler d1 list 2>/dev/null | grep "$DATABASE_NAME" || echo "")                                             
          if [ -z "$DATABASE_INFO" ]; then                                                                                             
            echo "正在创建 D1 数据库..."                                                                                             
            wrangler d1 create "$DATABASE_NAME" --location="$LOCATION"

            echo "数据库创建成功，正在初始化..."
            if [ -f "./db.sql" ]; then
              wrangler d1 execute "$DATABASE_NAME" --file=./db.sql --remote
              echo "数据库初始化成功"
            else
              echo "❌ 错误: 在 ./workers 目录中未找到 db.sql 文件!"
              exit 1
            fi
          else                                                                                                                         
            echo "使用现有 D1 数据库"
          fi

          # 总是获取最新的数据库 ID 并更新 wrangler.toml
          DATABASE_ID=$(wrangler d1 list 2>/dev/null | grep "$DATABASE_NAME" | awk '{print $2}')
          if [ -n "$DATABASE_ID" ]; then
            sed -i "s/database_id = \".*\"/database_id = \"$DATABASE_ID\"/" wrangler.toml
            echo "✅ 已使用 D1 数据库 ID 更新 wrangler.toml"
          else
            echo "❌ 获取 D1 数据库 ID 失败"
            exit 1
          fi

      - name: 4. Create R2 Bucket if not exists
        working-directory: ./workers  # <--- 添加这一行
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          BUCKET_NAME=${{ secrets.CF_R2_BUCKET || 'buling-imgbed-r2' }}
          LOCATION=${{ secrets.CF_LOCATION || 'apac' }}
          
          echo "检查现有 R2 存储桶..."
          BUCKET_INFO=$(wrangler r2 bucket list | grep "$BUCKET_NAME" || echo "")
          if [ -z "$BUCKET_INFO" ]; then
            echo "正在创建 R2 存储桶..."
            wrangler r2 bucket create "$BUCKET_NAME" --location="$LOCATION"
            echo "✅ R2 存储桶创建成功"
          else
            echo "使用现有 R2 存储桶"
          fi
      
      - name: 5. Update wrangler.toml with secrets and actual values
        working-directory: ./workers  # <--- 添加这一行
        env:
          # 将 secrets 传递到环境中
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        run: |
          # 设置默认值
          DATABASE_NAME=${{ secrets.CF_D1_DATABASE || 'buling-imgbed-d1' }}
          BUCKET_NAME=${{ secrets.CF_R2_BUCKET || 'buling-imgbed-r2' }}

          # 更新 wrangler.toml 中的绑定名称
          sed -i "s/database_name = \".*\"/database_name = \"$DATABASE_NAME\"/" wrangler.toml
          sed -i "s/bucket_name = \".*\"/bucket_name = \"$BUCKET_NAME\"/" wrangler.toml
          echo "✅ 已使用 D1/R2 名称更新 wrangler.toml"

          # (可选但推荐) 直接通过环境变量设置 secrets，而不是用 sed 写入文件
          # 确保你的 wrangler.toml 中有 [vars] 部分来接收这些值
          # 例如: JWT_SECRET = "a_default_or_empty_value"

      - name: 6. Deploy to Cloudflare Workers
        working-directory: ./workers  # <--- 添加这一行
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # 在部署时将 secrets 作为环境变量传递
          # Wrangler 会自动将它们创建为 Worker 的加密环境变量
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        run: |
          echo "开始部署到 Cloudflare Workers..."
          # 直接使用 wrangler deploy，它会自动从 wrangler.toml 读取配置
          # secrets 会通过环境变量被 wrangler 捕获并安全地上传
          wrangler deploy
          echo "✅ 部署成功"
