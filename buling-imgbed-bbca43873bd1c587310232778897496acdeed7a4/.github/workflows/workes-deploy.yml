name: 部署布灵图床后端到Cloudflare Workers

on:
  push:
    branches:
      - main
    # 添加路径过滤器，这样此工作流只在 /workers/ 目录下的文件变更时运行
    paths:
      - 'workers/**'
      - '.github/workflows/workes-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Worker
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4                                                                                                      
                                                                                                                                       
      # --- 您之前添加的调试步骤，验证路径正确后可以移除或注释掉 ---
      # - name: Debug - List repository contents and verify workers directory
      #   run: |
      #     echo "当前工作目录 (Current working directory):"
      #     pwd
      #     echo "仓库根目录内容 (Listing contents of repository root):"
      #     ls -laF .
      #     echo ""
      #     echo "尝试列出 'workers' 目录的内容 (Attempting to list 'workers' directory contents):"
      #     ls -laF workers/ || echo "❌ 'workers' 目录不存在或无法访问！"
      #     echo ""
      #     echo "检查 'workers' 目录的详细信息 (Checking details of 'workers' directory):"
      #     ls -ld workers/ || echo "❌ 'workers' 目录本身不存在！"
      #     echo ""
      #     echo "递归列出仓库所有内容 (Recursive listing of all repository contents):"
      #     ls -RF .
      # --- 调试步骤结束 ---

      - name: 1. Setup Node.js                                                                                                          
        uses: actions/setup-node@v4                                                                                                    
        with:                                                                                                                          
          node-version: '20'                                                                                                           
                                                                                                                                       
      - name: 2. Install Dependencies                                                                                                   
        working-directory: ./workers  # 确保这个路径是正确的
        run: |       
          echo "开始在 ./workers 目录安装依赖..."                                                                                                                  
          npm install                                                                                                                  
          npm install -g wrangler                                                                                                      
          which wrangler  # 显示 wrangler 的安装位置                                                                                   
          wrangler --version  # 显示 wrangler 版本                                                                                     
          echo "✅ 依赖安装成功"
                                                                                                                                       
      - name: 3. Create D1 Database if not exists                                                                                       
        working-directory: ./workers  # 确保这个路径是正确的
        env:                                                                                                                           
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}                                                                            
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}                                                                          
        run: |                                                                                                                         
          DATABASE_NAME=${{ secrets.CF_D1_DATABASE || 'buling-imgbed-d1' }}                                                            
          LOCATION=${{ secrets.CF_LOCATION || 'apac' }}
          CURRENT_DATABASE_ID="" # 用于存储实际的数据库ID

          echo "检查现有 D1 数据库..."                                                                                     
          DATABASE_INFO=$(wrangler d1 list 2>/dev/null | grep "$DATABASE_NAME" || echo "")                                             
          if [ -z "$DATABASE_INFO" ]; then                                                                                             
            echo "正在创建 D1 数据库..."                                                                                             
            # 捕获 wrangler d1 create 的完整输出，以便从中提取 database_id
            CREATE_OUTPUT=$(wrangler d1 create "$DATABASE_NAME" --location="$LOCATION")
            echo "$CREATE_OUTPUT" # 打印创建输出以便调试
            
            # 从输出中提取 database_id。使用 grep 和 sed 匹配并提取双引号内的UUID。
            NEW_DATABASE_ID=$(echo "$CREATE_OUTPUT" | grep "database_id = \"" | sed -n 's/.*database_id = "\([^"]*\)".*/\1/p')

            if [ -z "$NEW_DATABASE_ID" ]; then
              echo "❌ 错误: 创建 D1 数据库后未能获取到有效的 database_id！"
              echo "请检查 wrangler d1 create 的输出格式是否符合预期。"
              exit 1
            fi
            CURRENT_DATABASE_ID="$NEW_DATABASE_ID"
            echo "✅ 数据库创建成功，ID: $CURRENT_DATABASE_ID"
          else                                                                                                                         
            echo "使用现有 D1 数据库"
            # 如果数据库已存在，从 wrangler d1 list 的输出中获取 ID (假设ID是第二列)
            EXISTING_DATABASE_ID=$(echo "$DATABASE_INFO" | awk '{print $2}')
            if [ -z "$EXISTING_DATABASE_ID" ]; then
              echo "❌ 错误: 发现现有 D1 数据库，但未能获取到有效的 database_id！"
              exit 1
            fi
            CURRENT_DATABASE_ID="$EXISTING_DATABASE_ID"
            echo "✅ 现有数据库 ID: $CURRENT_DATABASE_ID"
          fi

          if [ -z "$CURRENT_DATABASE_ID" ]; then
            echo "❌ 致命错误: 无法获取 D1 数据库 ID！"
            exit 1
          fi

          # 在执行任何依赖 wrangler.toml 中 database_id 的命令之前，先更新它
          # 查找并替换 wrangler.toml 中所有可能的 database_id 绑定
          if grep -q "database_id =" wrangler.toml; then
              sed -i "s/database_id = \".*\"/database_id = \"$CURRENT_DATABASE_ID\"/" wrangler.toml
              echo "✅ 已使用 D1 数据库 ID '$CURRENT_DATABASE_ID' 更新 wrangler.toml"
          else
              echo "⚠️ wrangler.toml 中未找到 'database_id ='，请确保您的 wrangler.toml 配置正确。"
              # 如果 wrangler.toml 没有 database_id 这一行，可以考虑添加它
              # 但通常情况下，Cloudflare Workers 的 boilerplate 会有这个占位符
          fi


          echo "数据库初始化..."
          if [ -f "./db.sql" ]; then
            # 现在 wrangler.toml 已经更新，可以安全地执行初始化
            echo "执行数据库初始化脚本 db.sql..."
            wrangler d1 execute "$DATABASE_NAME" --file=./db.sql --remote
            echo "✅ 数据库初始化成功"
          else
            echo "❌ 错误: 在 ./workers 目录中未找到 db.sql 文件!"
            exit 1
          fi

      - name: 4. Create R2 Bucket if not exists
        working-directory: ./workers  # 确保这个路径是正确的
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          BUCKET_NAME=${{ secrets.CF_R2_BUCKET || 'buling-imgbed-r2' }}
          LOCATION=${{ secrets.CF_LOCATION || 'apac' }}
          
          echo "检查现有 R2 存储桶..."
          BUCKET_INFO=$(wrangler r2 bucket list | grep "$BUCKET_NAME" || echo "")
          if [ -z "$BUCKET_INFO" ]; then
            echo "正在创建 R2 存储桶..."
            wrangler r2 bucket create "$BUCKET_NAME" --location="$LOCATION"
            echo "✅ R2 存储桶创建成功"
          else
            echo "使用现有 R2 存储桶"
          fi
      
      - name: 5. Update wrangler.toml with secrets and actual values
        working-directory: ./workers  # 确保这个路径是正确的
        env:
          # 将 secrets 传递到环境中
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        run: |
          # 设置默认值
          DATABASE_NAME=${{ secrets.CF_D1_DATABASE || 'buling-imgbed-d1' }}
          BUCKET_NAME=${{ secrets.CF_R2_BUCKET || 'buling-imgbed-r2' }}

          # 更新 wrangler.toml 中的绑定名称
          # 注意：database_id 在步骤3已经更新，这里主要是更新 database_name 和 bucket_name
          sed -i "s/database_name = \".*\"/database_name = \"$DATABASE_NAME\"/" wrangler.toml
          sed -i "s/bucket_name = \".*\"/bucket_name = \"$BUCKET_NAME\"/" wrangler.toml
          echo "✅ 已使用 D1/R2 名称更新 wrangler.toml"

          # (可选但推荐) 直接通过环境变量设置 secrets，而不是用 sed 写入文件
          # 确保你的 wrangler.toml 中有 [vars] 部分来接收这些值
          # 例如: JWT_SECRET = "a_default_or_empty_value"

      - name: 6. Deploy to Cloudflare Workers
        working-directory: ./workers  # 确保这个路径是正确的
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # 在部署时将 secrets 作为环境变量传递
          # Wrangler 会自动将它们创建为 Worker 的加密环境变量
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        run: |
          echo "开始部署到 Cloudflare Workers..."
          # 直接使用 wrangler deploy，它会自动从 wrangler.toml 读取配置
          # secrets 会通过环境变量被 wrangler 捕获并安全地上传
          wrangler deploy
          echo "✅ 部署成功"
